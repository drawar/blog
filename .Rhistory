content %>%
.$items
track_names <- sapply(1:length(tracks), function(t) tracks[[t]]$track$name)
ids <- map(1:length(tracks), function(z) tracks[[z]]$track$id) %>%
unlist %>% paste0(collapse=',')
res <- GET(paste0('https://api.spotify.com/v1/audio-features/?ids=', ids),
add_headers(Authorization = header_value)) %>% content %>% .$audio_features
df <- unlist(res) %>%
matrix(nrow = length(res), byrow = T) %>%
as.data.frame(stringsAsFactors = F)
names(df) <- names(res[[1]])
df['track_name'] <- track_names
return(as_tibble(df))
}
top_song <- get_playlist_tracks(user_id, playlist_id, headerValue)
tracks <- GET(paste0('https://api.spotify.com/v1/users/', user_id,'/playlists/', playlist_id, '/tracks'),
add_headers(Authorization = headerValue)) %>%
content %>%
.$items
track_names <- sapply(1:length(tracks), function(t) tracks[[t]]$track$name)
ids <- map(1:length(tracks), function(z) tracks[[z]]$track$id) %>%
unlist %>% paste0(collapse=',')
ids
tracks
headerValue <- get_header_value(clientID, secret)
get_playlist_tracks <- function(user_id, playlist_id, header_value) {
tracks <- GET(paste0('https://api.spotify.com/v1/users/', user_id,'/playlists/', playlist_id, '/tracks'),
add_headers(Authorization = header_value)) %>%
content %>%
.$items
track_names <- sapply(1:length(tracks), function(t) tracks[[t]]$track$name)
ids <- map(1:length(tracks), function(z) tracks[[z]]$track$id) %>%
unlist %>% paste0(collapse=',')
res <- GET(paste0('https://api.spotify.com/v1/audio-features/?ids=', ids),
add_headers(Authorization = header_value)) %>% content %>% .$audio_features
df <- unlist(res) %>%
matrix(nrow = length(res), byrow = T) %>%
as.data.frame(stringsAsFactors = F)
names(df) <- names(res[[1]])
df['track_name'] <- track_names
return(as_tibble(df))
}
top_song <- get_playlist_tracks(user_id, playlist_id, headerValue)
get_playlist_tracks <- function(user_id, playlist_id, header_value) {
tracks <- GET(paste0('https://api.spotify.com/v1/users/', user_id,'/playlists/', playlist_id, '/tracks'),
add_headers(Authorization = header_value)) %>%
content %>%
.$items
track_names <- sapply(1:length(tracks), function(t) tracks[[t]]$track$name)
ids <- map(1:length(tracks), function(z) tracks[[z]]$track$id) %>%
unlist %>% paste0(collapse=',')
res <- GET(paste0('https://api.spotify.com/v1/audio-features/?ids=', ids),
add_headers(Authorization = header_value)) %>% content %>% .$audio_features
df <- unlist(res) %>%
matrix(nrow = length(res), byrow = T) %>%
as.data.frame(stringsAsFactors = F)
names(df) <- names(res[[1]])
df['track_name'] <- track_names
return(as_tibble(df)) %>%
mutate_at(c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric(gsub('[^0-9.-e]+', '', as.character(.))))) # for some reason parse_number() from readr doesn't work here
}
top_song <- get_playlist_tracks(user_id, playlist_id, headerValue)
top_song
get_playlist_tracks <- function(user_id, playlist_id, header_value) {
tracks <- GET(paste0('https://api.spotify.com/v1/users/', user_id,'/playlists/', playlist_id, '/tracks'),
add_headers(Authorization = header_value)) %>%
content %>%
.$items
track_names <- sapply(1:length(tracks), function(t) tracks[[t]]$track$name)
ids <- map(1:length(tracks), function(z) tracks[[z]]$track$id) %>%
unlist %>% paste0(collapse=',')
res <- GET(paste0('https://api.spotify.com/v1/audio-features/?ids=', ids),
add_headers(Authorization = header_value)) %>% content %>% .$audio_features
df <- unlist(res) %>%
matrix(nrow = length(res), byrow = T) %>%
as.data.frame(stringsAsFactors = F)
names(df) <- names(res[[1]])
df['track_name'] <- track_names
df %>%
mutate_at(c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric(gsub('[^0-9.-e]+', '', as.character(.))))) # for some reason parse_number() from readr doesn't work here
return(as_tibble(df))
}
top_song <- get_playlist_tracks(user_id, playlist_id, headerValue)
top_song
top_song %>%
mutate_at(c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric(gsub('[^0-9.-e]+', '', as.character(.))))) # for some reason parse_number() from readr doesn't work here
#select(-mode, -speechiness, -acousticness, -instrumentalness, -liveness, -uri, -track_href, -analysis_url, -time_signature)
top_song
?mutate_at
top_song %>%
mutate_at(c(danceability, 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric(gsub('[^0-9.-e]+', '', as.character(.))))) # for some reason parse_number() from readr doesn't work here
top_song %>%
mutate_at(c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric(gsub('[^0-9.-e]+', '', as.character(.))))) # for some reason parse_number() from readr doesn't work here
#select(-mode, -speechiness, -acousticness, -instrumentalness, -liveness, -uri, -track_href, -analysis_url, -time_signature)
top_song %>%
mutate_at(c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric(gsub('[^0-9.-e]+', '', as.character(.))))) # for some reason parse_number() from readr doesn't work here
#select(-mode, -speechiness, -acousticness, -instrumentalness, -liveness, -uri, -track_href, -analysis_url, -time_signature)
top_song %>%
mutate_at(c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric())) # for some reason parse_number() from readr doesn't work here
?as.numeric
top_song %>%
mutate_at(c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), as.numeric()) # for some reason parse_number() from readr doesn't work here
#select(-mode, -speechiness, -acousticness, -instrumentalness, -liveness, -uri, -track_href, -analysis_url, -time_signature)
?mutate_at
mutate_at(top_song, c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), as.numeric()) # for some reason parse_number() from readr doesn't work here
#select(-mode, -speechiness, -acousticness, -instrumentalness, -liveness, -uri, -track_href, -analysis_url, -time_signature)
top_song <- get_playlist_tracks(user_id, playlist_id, headerValue)
mutate_at(top_song, c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric(gsub('[^0-9.-e]+', '', as.character(.))))) # for some reason parse_number() from readr doesn't work here
#select(-mode, -speechiness, -acousticness, -instrumentalness, -liveness, -uri, -track_href, -analysis_url, -time_signature)
get_playlist_tracks <- function(user_id, playlist_id, header_value) {
tracks <- GET(paste0('https://api.spotify.com/v1/users/', user_id,'/playlists/', playlist_id, '/tracks'),
add_headers(Authorization = header_value)) %>%
content %>%
.$items
track_names <- sapply(1:length(tracks), function(t) tracks[[t]]$track$name)
ids <- map(1:length(tracks), function(z) tracks[[z]]$track$id) %>%
unlist %>% paste0(collapse=',')
res <- GET(paste0('https://api.spotify.com/v1/audio-features/?ids=', ids),
add_headers(Authorization = header_value)) %>% content %>% .$audio_features
df <- unlist(res) %>%
matrix(nrow = length(res), byrow = T) %>%
as.data.frame(stringsAsFactors = F)
names(df) <- names(res[[1]])
df['track_name'] <- track_names
df %>%
mutate_at(c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric(gsub('[^0-9.-e]+', '', as.character(.))))) # for some reason parse_number() from readr doesn't work here
return(as_tibble(df))
}
top_song <- get_playlist_tracks(user_id, playlist_id, headerValue)
top_song
get_playlist_tracks <- function(user_id, playlist_id, header_value) {
tracks <- GET(paste0('https://api.spotify.com/v1/users/', user_id,'/playlists/', playlist_id, '/tracks'),
add_headers(Authorization = header_value)) %>%
content %>%
.$items
track_names <- sapply(1:length(tracks), function(t) tracks[[t]]$track$name)
ids <- map(1:length(tracks), function(z) tracks[[z]]$track$id) %>%
unlist %>% paste0(collapse=',')
res <- GET(paste0('https://api.spotify.com/v1/audio-features/?ids=', ids),
add_headers(Authorization = header_value)) %>% content %>% .$audio_features
df <- unlist(res) %>%
matrix(nrow = length(res), byrow = T) %>%
as.data.frame(stringsAsFactors = F)
names(df) <- names(res[[1]])
df['track_name'] <- track_names
df <- as_tibble(df) %>%
mutate_at(c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric(gsub('[^0-9.-e]+', '', as.character(.))))) # for some reason parse_number() from readr doesn't work here
return(df)
}
top_song <- get_playlist_tracks(user_id, playlist_id, headerValue)
top_song
top_song$danceability
top_song$danceability %>% hist()
library(multiplot)
install.pakages("multiplot")
install.packages("multiplot")
ggplot(top_song$danceability, aes(x=rating)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white")
ggplot(top_song, aes(x=danceability)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white")
ggplot(top_song, aes(x=danceability)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
colour="black", fill="white")
ggplot(top_song, aes(x=danceability*100)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=10,
colour="black", fill="white")
ggplot(top_song, aes(x=danceability*100)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=8,
colour="black", fill="white")
mtcars
mtlong <- reshape2::melt(mtcars)
mtlong
top_song_long <- reshape2::melt(top_song)
mtlong
top_song_long
str(top_song_long)
str(mtlong)
top_song_long %>% select(c('variable','value'))
top_song_long <- top_song_long[c('variable','value')]
top_song_long
top_song_long <- top_song_long*100
top_song_long['value'] <- top_song_long['value']*100
top_song_long
top_song <- get_playlist_tracks(user_id, playlist_id, headerValue)
top_song_long <- reshape2::melt(top_song)
top_song_long <- top_song_long[c('variable','value')]
top_song_long['value'] <- top_song_long['value']*100
top_song_long
ggplot(top_song_long, aes(value)) + facet_wrap(~variable, scales = 'free_x') +
geom_histogram(binwidth = function(x) 2 * IQR(x) / (length(x)^(1/3)))
warnings()
str(top_song_long)
top_song %>% select(-c(mode,speechiness, instrumentalness, liveness,time_signature))
top_song_long <- reshape2::melt(top_song)
top_song_long <- top_song_long[c('variable','value')]
top_song_long['value'] <- top_song_long['value']*100
spotify_df <- get_album_tracks(artist_info, album_info, headerValue)
ggplot(top_song_long, aes(value)) + facet_wrap(~variable, scales = 'free_x') +
geom_histogram(binwidth = function(x) 2 * IQR(x) / (length(x)^(1/3)))
spotify_df <- get_album_tracks(artist_info, album_info, headerValue)
top_song_trunc <- top_song %>% select(-c(mode,speechiness, instrumentalness, liveness,time_signature))
top_song_long <- reshape2::melt(top_song_trunc)
top_song_long <- top_song_long[c('variable','value')]
top_song_long['value'] <- top_song_long['value']*100
ggplot(top_song_long, aes(value)) + facet_wrap(~variable, scales = 'free_x') +
geom_histogram(binwidth = function(x) 2 * IQR(x) / (length(x)^(1/3)))
ggplot(top_song_long, aes(value)) + facet_wrap(~variable, scales = 'free_x') +
geom_histogram()
tracks <- GET(paste0('https://api.spotify.com/v1/users/', user_id,'/playlists/', playlist_id, '/tracks'),
add_headers(Authorization = header_value)) %>%
content %>%
.$items
track_names <- sapply(1:length(tracks), function(t) tracks[[t]]$track$name)
headerValue <- get_header_value(clientID, secret)
tracks <- GET(paste0('https://api.spotify.com/v1/users/', user_id,'/playlists/', playlist_id, '/tracks'),
add_headers(Authorization = headerValue)) %>%
content %>%
.$items
track_names <- sapply(1:length(tracks), function(t) tracks[[t]]$track$name)
length(track_names)
str(top_song_trunc)
names(top_song_trunc)
top_song_trunc[c('danceability','energy','acousticness','valence')] = 100*top_song_trunc[c('danceability','energy','acousticness','valence')]
top_song_long <- reshape2::melt(top_song_trunc)
top_song_long <- top_song_long[c('variable','value')]
ggplot(top_song_long, aes(value)) + facet_wrap(~variable, scales = 'free_x') +
geom_histogram()
top_song_trunc <- top_song %>% select(-c(mode,speechiness, instrumentalness, liveness,time_signature))
top_song_trunc[c('danceability','energy','acousticness','valence')] = 100*top_song_trunc[c('danceability','energy','acousticness','valence')]
top_song_trunc['duration_ms'] <- top_song_trunc['duration_ms']/1000
top_song_long <- reshape2::melt(top_song_trunc)
top_song_long <- top_song_long[c('variable','value')]
ggplot(top_song_long, aes(value)) + facet_wrap(~variable, scales = 'free_x') +
geom_histogram(binwidth = function(x) 2 * IQR(x) / (length(x)^(1/3)))
ggplot(top_song_long, aes(value)) + facet_wrap(~variable, scales = 'free_x') +
geom_histogram()
IQR(top_song_trunc$danceability)
?facet_wrap
top_song_long
ggplot(top_song_trunc, aes(danceability))
+     geom_histogram(binwidth = binwidth(top_song_trunc$danceability))
binwidth(x) <- function(x) 2 * IQR(x) / (length(x)^(1/3))
bin_width(x) <- function(x) 2 * IQR(x) / (length(x)^(1/3))
bin_width<- function(x) 2 * IQR(x) / (length(x)^(1/3))
ggplot(top_song_trunc, aes(danceability))
+     geom_histogram(binwidth = bin_width(top_song_trunc$danceability))
top_song_trunc$danceability
bin_width(top_song_trunc$danceability)
ggplot(top_song_trunc, aes(danceability))
+     geom_histogram(binwidth = 7)
ggplot(top_song_trunc, aes(danceability))
ggplot(top_song_trunc, aes(danceability))+ geom_histogram(binwidth = 7)
ggplot(top_song_trunc, aes(danceability))+ geom_histogram(binwidth = 7, fill="white",colour="black")
ggplot(top_song_trunc, aes(danceability))+ geom_histogram(binwidth = 7, fill="a8adf5")
ggplot(top_song_trunc, aes(danceability))+ geom_histogram(binwidth = 7, fill="A8ADF5")
ggplot(top_song_trunc, aes(danceability))+ geom_histogram(binwidth = 7, fill="lightskyblue")
ggplot(top_song_trunc, aes(danceability))+ geom_histogram(binwidth = 7, fill="lightskyblue2")
ggplot(top_song_trunc, aes(danceability))+ geom_histogram(binwidth = 7, fill="lightskyblue2", colour = "lightblue4")
ggplot(top_song_trunc, aes(danceability))+ geom_histogram(binwidth = 7, fill="lightskyblue2", colour = "lightblue3")
ggplot(top_song_trunc, aes(danceability))+ geom_histogram(binwidth = 7, fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2)
ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = 7, fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2)
g2 <- ggplot(top_song_trunc, aes(energy))+ geom_histogram(aes(y =..density..), binwidth = 7, fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2)
g2
?rounf
?round
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2)
g1
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = 5), fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2)
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = 5, fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2)
g1
l < density(top_song_trunc$danceability)
l <- density(top_song_trunc$danceability)
range(l$x)
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = 5, fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2) + xlim(range(l$x))
g1
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2) + xlim(range(l$x))
g1
bin_width(top_song_trunc$danceability)
bin_width <- function(x) 2 * IQR(x) / (length(x)^(1/3) %>% round(digits = 0))
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2)
g1
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2) + xlim(range(l$x))
g1
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2) + xlim(range(l$x)) + scale_fill_brewer(guide="none")
g1
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_line() + xlim(range(l$x)) + scale_fill_brewer(guide="none")
g1
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_line() + xlim(range(l$x))
g1
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2) + xlim(range(l$x)) + scale_fill_brewer(guide="none")
g1
l$y
range(l$y)
top_song_trunc.names
top_song_trunc.names()
names(top_song_trunc)
names(top_song_trunc)[1]
?gsub
gsub('\"', '',names(top_song_trunc)[1])
a <- names(top_song_trunc)[1]
g1 <- ggplot(top_song_trunc, aes(a))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2) + xlim(range(l$x))
g1
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2) + xlim(range(l$x))
g1
ggplot(top_song_trunc, aes(danceability))
ggplot(top_song_trunc, aes(A))
ggplot(top_song_trunc, aes(a))
ggplot(top_song_trunc, aes(danceability))
ggplot(top_song_trunc, aes(a))
ggplot(top_song_trunc, aes(danceability))
g1 <- ggplot(top_song_trunc, aes(danceability))+ geom_histogram(aes(y =..density..), binwidth = bin_width(top_song_trunc$danceability), fill="lightskyblue2", colour = "lightblue3") + geom_density(alpha=.2) + xlim(range(l$x))
g1
library(highcharter)
install.packages("highcharter")
library(highcharter)
highchart() %>%
hc_add_series(data = round(diff13$diff_ppt, 4), type = "column",
name = "Difference, in ppt",
color = "#F0A1EA", showInLegend = FALSE) %>%
hc_yAxis(title = list(text = "Difference, in ppt"), allowDecimals = FALSE) %>%
hc_xAxis(categories = c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"),
tickmarkPlacement = "on",
opposite = TRUE) %>%
hc_title(text = "The Friday the 13th effect",
style = list(fontWeight = "bold")) %>%
hc_subtitle(text = "Difference in the share of U.S. births on 13th of each month
from the average of births on the 6th and the 20th,
1994 - 2004") %>%
hc_tooltip(valueDecimals = 4,
pointFormat = "Day: {point.x} <br> Diff: {point.y}") %>%
hc_credits(enabled = TRUE,
text = "Sources: CDC/NCHS, SOCIAL SECURITY ADMINISTRATION",
style = list(fontSize = "10px")) %>%
hc_add_theme(hc_theme_538())
births <- read.csv("https://github.com/mine-cetinkaya-rundel/highcharts-in-r/raw/master/data/births.csv")
diff13 <- births %>%
filter(date_of_month %in% c(6, 13, 20)) %>%
mutate(day = ifelse(date_of_month == 13, "thirteen", "not_thirteen")) %>%
group_by(day_of_week, day) %>%
summarise(mean_births = mean(births)) %>%
arrange(day_of_week) %>%
spread(day, mean_births) %>%
mutate(diff_ppt = ((thirteen - not_thirteen) / not_thirteen) * 100)
highchart() %>%
hc_add_series(data = round(diff13$diff_ppt, 4), type = "column",
name = "Difference, in ppt",
color = "#F0A1EA", showInLegend = FALSE) %>%
hc_yAxis(title = list(text = "Difference, in ppt"), allowDecimals = FALSE) %>%
hc_xAxis(categories = c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"),
tickmarkPlacement = "on",
opposite = TRUE) %>%
hc_title(text = "The Friday the 13th effect",
style = list(fontWeight = "bold")) %>%
hc_subtitle(text = "Difference in the share of U.S. births on 13th of each month
from the average of births on the 6th and the 20th,
1994 - 2004") %>%
hc_tooltip(valueDecimals = 4,
pointFormat = "Day: {point.x} <br> Diff: {point.y}") %>%
hc_credits(enabled = TRUE,
text = "Sources: CDC/NCHS, SOCIAL SECURITY ADMINISTRATION",
style = list(fontSize = "10px")) %>%
hc_add_theme(hc_theme_538())
hchart(g1)
hist(top_song_trunc$danceability)
h1 <- hist(top_song_trunc$danceability)
hchart(h1)
h1 <- hist(top_song_trunc$danceability, bin_width = bin_width(top_song_trunc$danceability))
bin_width(top_song_trunc$danceability
)
top_song_trunc$danceability
bin_width(top_song_trunc$danceability)
bin_width <- function(x) 2 * IQR(x) / (length(x)^(1/3)) %>% round(digits = 0)
bin_width(top_song_trunc$danceability)
bin_width <- function(x) round(2 * IQR(x) / (length(x)^(1/3)),0)
bin_width(top_song_trunc$danceability)
h1 <- hist(top_song_trunc$danceability, bin_width = bin_width(top_song_trunc$danceability))
?hist
hchart(top_song_trunc$danceability)
h1 <- hist(top_song_trunc$danceability, breaks = 10, freq = F)
hchart(h1)
hchart(top_song_trunc$danceability)
hchart(top_song_trunc$danceability) %>% hc_add_series_density(top_song_trunc$danceability)
hchart(top_song_trunc$danceability) %>% hc_add_series.density(top_song_trunc$danceability)
?hc_add_series.density
hchart(top_song_trunc$danceability) %>% hc_add_series(density(top_song_trunc$danceability))
?hchart
h1
highcharter:::hchart.histogram
danceability <- top_song_trunc$danceability
danceability
danceability <- danceability/sum(danceability)
hchart(danceability) %>% hc_add_series(density(danceability))
danceability
hchart(danceability) %>% hc_add_series(density(top_song_trunc$danceability))
hchart(danceability)
hc_add_series(density(top_song_trunc$danceability))
hchart(density(top_song_trunc$danceability))
?hc_add_series.numeric(danceability)
hchart(density(top_song_trunc$danceability)) %>% hc_add_series.numeric(danceability)
hchart(density(top_song_trunc$danceability)) %>% hc_add_series(danceability)
?hc_xAxis
hchart(danceability) %>% hc_add_series(density(top_song_trunc$danceability))
hchart(danceability) %>% hc_add_series(density(danceability))
get_hist_data <- function(object) {
d <- diff(object$breaks)[1]
print(d)
df <- data_frame(
x = object$mids,
y = object$counts,
name = sprintf("(%s, %s]",
object$mids - d / 2,
object$mids + d / 2))
}
h1
plot(h1)
hist(top_song_trunc$danceability, frequency = F)
?hist
hist(top_song_trunc$danceability, freq = F)
hist(top_song_trunc$danceability, freq = F, breaks = 10)
h1 <- hist(top_song_trunc$danceability, freq = F, breaks = 10)
h1data <- get_hist_data(h1)
hchart(top_song_trunc$danceability)
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(h1data), type = "column",
pointRange = 0.05, groupPadding = 0, pointPadding =  0, borderWidth = 0)
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(h1data), type = "spline",
pointRange = 0.05, groupPadding = 0, pointPadding =  0, borderWidth = 0)
list_parse(h1data)
density(top_song_trunc$danceability)
l <- density(top_song_trunc$danceability)
l$x
?hc_a
hchart(lines(l))
l
h1
list_parse(h1data)
?list_parse
?range
range
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(l$counts)))), type = "spline",pointRange = 0.05, groupPadding = 0, pointPadding =  0, borderWidth = 0)
?rescale
library(scales)
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(l$counts)))), type = "spline",pointRange = 0.05, groupPadding = 0, pointPadding =  0, borderWidth = 0)
rescale(l$y,range(l$counts))
range(l$counts)
rescale(l$y,range(h1$counts))
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline",pointRange = 0.05, groupPadding = 0, pointPadding =  0, borderWidth = 0)
?hc_yAxis_multiples
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline", color = "B0C4DE")
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline")
?hc_legend
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline") %>% hc_legend(enabled = F)
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline") %>% hc_legend(enabled = F) %>% hc_add_annotation(text = "Mean")
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline") %>% hc_legend(enabled = F) %>% hc_annotations(list(xValue = 4, yValue = 125, title = list(text = 'Annotated chart!')))
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline") %>% hc_legend(enabled = F) %>% hc_annotations(list(xValue = 4, yValue = 15, title = list(text = 'Annotated chart!')))
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline") %>% hc_legend(enabled = F) %>% hc_annotations(list(xValue = 40, yValue = 15, title = list(text = 'Annotated chart!')))
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline") %>% hc_legend(enabled = F) %>% hc_annotations(list(xValue = 40, yValue = 12, title = list(text = 'Annotated chart!')))
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline") %>% hc_legend(enabled = F) %>% hc_annotations(list(xValue = 35, yValue = 13, title = list(text = 'Annotated chart!')))
text = 'Annotated chart!'
text.cat(as.character(3.4))
?paste
paste(text, as.character(3.4))
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline") %>% hc_legend(enabled = F) %>% hc_annotations(list(xValue = 35, yValue = 13, title = list(text = paste('Mean: ', as.character(mean(top_song_trunc$danceability)))))
)
hchart(top_song_trunc$danceability) %>% hc_add_series(data = list_parse(data.frame(x=l$x,y=rescale(l$y,range(h1$counts)))), type = "spline") %>% hc_legend(enabled = F) %>% hc_annotations(list(xValue = 35, yValue = 13, title = list(text = paste('Mean: ', as.character(mean(top_song_trunc$danceability))))))
install.packages("servr")
library(servr)
library(knitr)
servr::jekyll()
servr::jekyll()
system('jekyll')
servr::jekyll()
servr::jekyll(command = '/usr/local/bin/jekyll build')
servr::jekyll(command = '/usr/local/wrappers/jekyll build')
servr::jekyll(command = '~/usr/local/bin/jekyll build')
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
get_wd()
getwd()
setwd("~/Documents/blog")
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
servr::jekyll(script = "_knitr/build.R", serve = FALSE,command = '/usr/local/bin/jekyll build')
servr::jekyll(command = '/usr/local/bin/jekyll build')
servr::jekyll(command = '/usr/local/bin/jekyll build')
servr::jekyll(command = '/usr/local/bin/jekyll build')
servr::jekyll(command = '/usr/local/bin/jekyll build')
